# -*- coding: utf-8 -*-
"""CoinToss_BasicInput.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W13FIeqCvAkPXqVHqycruZNbSX3b8Wuo
"""

import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def coin_toss_experiment(gain, loss, starting_capital, heads_probability, num_tosses):
    # Simulate coin tosses
    np.random.seed(0)
    results = np.random.choice([1, -1], size=num_tosses, p=[heads_probability, 1-heads_probability])
    cumulative_results = np.cumsum(results)

    # Calculate capital after each toss
    capital = starting_capital + gain * np.sum(results[results == 1]) - loss * np.sum(results[results == -1])
    # cumulative_capital = starting_capital + np.where(results == 1,gain*np.cumsum(results),loss*np.cumsum(results))
    cumulative_capital = starting_capital + np.cumsum(np.where(results == 1,gain*(results),loss*(results)))

    # Create a DataFrame to store the results
    data = {
        'Toss': np.arange(1, num_tosses+1),
        'Result': results,
        'Capital After Toss': cumulative_capital
    }
    df = pd.DataFrame(data)

    return capital, df

def main():
    st.title('Coin Toss Experiment')

    # User inputs
    gain = st.number_input('Gain when winning:', value=1)
    loss = st.number_input('Loss when losing:', value=1)
    starting_capital = st.number_input('Starting Capital:', value=100)
    heads_probability = st.slider('Probability of Heads:', min_value=0.0, max_value=1.0, step=0.01, value=0.5)
    num_tosses = st.number_input('Number of Coin Tosses:', min_value=1, value=100)

    if st.button('Simulate'):
        capital, results_df = coin_toss_experiment(gain, loss, starting_capital, heads_probability, num_tosses)

        # Display results
        st.subheader('Experiment Results')
        st.write(f'Final Capital: {capital}')
        st.dataframe(results_df)

        # Plot capital over time
        st.subheader('Capital Over Time')
        plt.plot(results_df['Toss'], results_df['Capital After Toss'])
        plt.xlabel('Number of Tosses')
        plt.ylabel('Capital')
        plt.grid()
        st.pyplot(plt)

if __name__ == '__main__':
    main()

